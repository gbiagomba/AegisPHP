name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

env:
  IMAGE_NAME: phalanx
  REGISTRY: ghcr.io

jobs:
  # Job 1: Lint and validate Python code
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint mypy flake8

      - name: Run pylint
        run: pylint phalanx.py --exit-zero

      - name: Run mypy
        run: mypy phalanx.py --install-types --non-interactive || true

      - name: Run flake8
        run: flake8 phalanx.py --max-line-length=120 --exit-zero

      - name: Check Python syntax
        run: python -m py_compile phalanx.py

  # Job 2: Build and test Docker image on multiple platforms
  build-docker:
    name: Build Docker Image (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux/amd64
            arch: x64
          - os: ubuntu-latest
            platform: linux/arm64
            arch: arm64
          - os: macos-latest
            platform: darwin/amd64
            arch: x64
          - os: macos-latest
            platform: darwin/arm64
            arch: arm64
          - os: windows-latest
            platform: windows/amd64
            arch: x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx (Linux only)
        if: runner.os == 'Linux'
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (Linux)
        if: runner.os == 'Linux'
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:test .
          docker images

      - name: Test Docker image (Linux)
        if: runner.os == 'Linux'
        run: |
          docker run --rm ${{ env.IMAGE_NAME }}:test psalm --version
          docker run --rm ${{ env.IMAGE_NAME }}:test parse --version

      - name: Install Docker Desktop (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install --cask docker || true
          # Note: Docker Desktop on GH Actions macOS runners requires manual setup

      - name: Install Docker Desktop (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install docker-desktop -y || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Test Python script
        run: python phalanx.py --version

  # Job 3: Test on multiple Python versions
  test-python:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python --version

      - name: Check script syntax
        run: python -m py_compile phalanx.py

      - name: Test version command
        run: python phalanx.py --version

      - name: Test help command
        run: python phalanx.py --help

  # Job 4: Build multi-arch Docker images and push to registry
  build-and-push:
    name: Build and Push Multi-Arch Docker Image
    runs-on: ubuntu-latest
    needs: [lint, build-docker, test-python]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 5: Create GitHub Release on tag push
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: PHALANX v${{ steps.version.outputs.VERSION }}
          body: |
            ## PHALANX v${{ steps.version.outputs.VERSION }}

            ### Installation

            **Linux/macOS/Unix:**
            ```bash
            curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash
            ```

            **Windows (PowerShell as Administrator):**
            ```powershell
            irm https://raw.githubusercontent.com/${{ github.repository }}/main/install.ps1 | iex
            ```

            **Docker:**
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
            ```

            ### What's Changed
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.

            ### Checksums
            Docker Image: `${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}`

          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          files: |
            phalanx.py
            install.sh
            install.ps1
            Dockerfile
            Makefile
            README.md
            CHANGELOG.md

  # Job 6: Test install scripts
  test-install:
    name: Test Install Script on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make install script executable
        run: chmod +x install.sh

      - name: Test install script (dry run)
        run: |
          # Test that script runs without errors
          bash install.sh --help || true

  # Job 7: Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner on Dockerfile
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'Dockerfile'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Bandit security linter for Python
        run: |
          pip install bandit
          bandit -r phalanx.py -f json -o bandit-results.json || true

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results
          path: bandit-results.json
